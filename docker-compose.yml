services:
  database:
    image: postgres:15
    container_name: prewave_edge_database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: prewave
      POSTGRES_PASSWORD: prew4vePwd
      POSTGRES_DB: tree_edge_db
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  app:
    image: gradle:8.13-jdk17-alpine
    ports:
      - "8080:8080"
    working_dir: /app
    volumes:
      - ./build/libs/:/app
    command: sh -c "java -jar prewave-assignment-0.0.1-SNAPSHOT.jar"

    container_name: prewave-assignment
    environment:
      SERVER_PORT: 8080
      SERVER_ADDRESS: 0.0.0.0
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: prewave
      DB_PASSWORD: prew4vePwd
      DB_NAME: tree_edge_db
    depends_on:
      - database

volumes:
  db-data:

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
